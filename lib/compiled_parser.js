/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[5,26],$V2=[1,14],$V3=[1,13],$V4=[5,26,31,42],$V5=[1,17],$V6=[5,26,31,42,45,62],$V7=[1,28],$V8=[1,30],$V9=[1,31],$Va=[1,40],$Vb=[1,44],$Vc=[1,45],$Vd=[1,41],$Ve=[1,42],$Vf=[1,39],$Vg=[1,43],$Vh=[1,25],$Vi=[5,26,31],$Vj=[5,26,31,42,45],$Vk=[1,57],$Vl=[18,43],$Vm=[1,60],$Vn=[1,61],$Vo=[1,62],$Vp=[1,63],$Vq=[5,18,23,26,31,34,37,38,41,42,43,45,62,64,65,66,67,68,75,78,80],$Vr=[5,18,23,26,31,34,37,38,41,42,43,44,45,51,62,64,65,66,67,68,69,75,78,80],$Vs=[1,71],$Vt=[2,85],$Vu=[1,85],$Vv=[1,86],$Vw=[1,107],$Vx=[5,26,31,42,43,44],$Vy=[1,116],$Vz=[5,26,31,42,43,45,64],$VA=[5,26,31,41,42,45,62],$VB=[1,119],$VC=[1,120],$VD=[1,121],$VE=[5,26,31,34,35,37,38,41,42,45,62],$VF=[18,23,26,43],$VG=[5,26,31,34,37,38,41,42,45,62],$VH=[5,26,31,42,56,58];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Root":3,"Query":4,"EOF":5,"SelectQuery":6,"Unions":7,"SelectWithLimitQuery":8,"BasicSelectQuery":9,"Select":10,"OrderClause":11,"GroupClause":12,"LimitClause":13,"SelectClause":14,"WhereClause":15,"SELECT":16,"Fields":17,"FROM":18,"Table":19,"DISTINCT":20,"Joins":21,"Literal":22,"AS":23,"LEFT_PAREN":24,"List":25,"RIGHT_PAREN":26,"WINDOW":27,"WINDOW_FUNCTION":28,"Number":29,"Union":30,"UNION":31,"ALL":32,"Join":33,"JOIN":34,"ON":35,"Expression":36,"LEFT":37,"RIGHT":38,"INNER":39,"OUTER":40,"WHERE":41,"LIMIT":42,"SEPARATOR":43,"OFFSET":44,"ORDER":45,"BY":46,"OrderArgs":47,"OffsetClause":48,"OrderArg":49,"Value":50,"DIRECTION":51,"OffsetRows":52,"FetchClause":53,"ROW":54,"ROWS":55,"FETCH":56,"FIRST":57,"ONLY":58,"NEXT":59,"GroupBasicClause":60,"HavingClause":61,"GROUP":62,"ArgumentList":63,"HAVING":64,"MATH":65,"MATH_MULTI":66,"OPERATOR":67,"CONDITIONAL":68,"SUB_SELECT_OP":69,"SubSelectExpression":70,"SUB_SELECT_UNARY_OP":71,"Case":72,"CASE":73,"CaseWhen":74,"END":75,"CaseElse":76,"WHEN":77,"THEN":78,"CaseWhens":79,"ELSE":80,"String":81,"Function":82,"UserFunction":83,"Boolean":84,"Parameter":85,"NUMBER":86,"BOOLEAN":87,"PARAMETER":88,"STRING":89,"DBLSTRING":90,"LITERAL":91,"DOT":92,"FUNCTION":93,"AggregateArgumentList":94,"Field":95,"STAR":96,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"SELECT",18:"FROM",20:"DISTINCT",23:"AS",24:"LEFT_PAREN",26:"RIGHT_PAREN",27:"WINDOW",28:"WINDOW_FUNCTION",31:"UNION",32:"ALL",34:"JOIN",35:"ON",37:"LEFT",38:"RIGHT",39:"INNER",40:"OUTER",41:"WHERE",42:"LIMIT",43:"SEPARATOR",44:"OFFSET",45:"ORDER",46:"BY",51:"DIRECTION",54:"ROW",55:"ROWS",56:"FETCH",57:"FIRST",58:"ONLY",59:"NEXT",62:"GROUP",64:"HAVING",65:"MATH",66:"MATH_MULTI",67:"OPERATOR",68:"CONDITIONAL",69:"SUB_SELECT_OP",71:"SUB_SELECT_UNARY_OP",73:"CASE",75:"END",77:"WHEN",78:"THEN",80:"ELSE",86:"NUMBER",87:"BOOLEAN",88:"PARAMETER",89:"STRING",90:"DBLSTRING",91:"LITERAL",92:"DOT",93:"FUNCTION",96:"STAR"},
productions_: [0,[3,2],[4,1],[4,2],[6,1],[6,1],[9,1],[9,2],[9,2],[9,3],[8,2],[10,1],[10,2],[14,4],[14,5],[14,5],[14,6],[19,1],[19,2],[19,3],[19,3],[19,3],[19,4],[19,6],[7,1],[7,2],[30,2],[30,3],[21,1],[21,2],[33,4],[33,5],[33,5],[33,6],[33,6],[33,6],[33,6],[15,2],[13,2],[13,4],[13,4],[11,3],[11,4],[47,1],[47,3],[49,1],[49,2],[48,2],[48,3],[52,2],[52,2],[53,4],[53,4],[12,1],[12,2],[60,3],[61,2],[36,3],[36,3],[36,3],[36,3],[36,3],[36,5],[36,3],[36,2],[36,1],[70,3],[72,3],[72,4],[74,4],[79,1],[76,2],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[25,1],[29,1],[84,1],[85,1],[81,1],[81,1],[22,1],[22,3],[82,4],[82,4],[83,4],[83,4],[94,1],[94,2],[63,1],[63,3],[17,1],[17,3],[95,1],[95,1],[95,3],[95,1],[95,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return this.$ = $$[$0-1];
break;
case 2: case 4: case 5: case 6: case 11: case 53: case 65: case 72: case 73: case 74: case 75: case 76: case 77: case 78:
this.$ = $$[$0];
break;
case 3:
this.$ = (function () {
        $$[$0-1].unions = $$[$0];
        return $$[$0-1];
      }());
break;
case 7:
this.$ = (function () {
        $$[$0-1].order = $$[$0];
        return $$[$0-1];
      }());
break;
case 8:
this.$ = (function () {
        $$[$0-1].group = $$[$0];
        return $$[$0-1];
      }());
break;
case 9:
this.$ = (function () {
        $$[$0-2].group = $$[$0-1];
        $$[$0-2].order = $$[$0];
        return $$[$0-2];
      }());
break;
case 10:
this.$ = (function () {
        $$[$0-1].limit = $$[$0];
        return $$[$0-1];
      }());
break;
case 12:
this.$ = (function () {
        $$[$0-1].where = $$[$0];
        return $$[$0-1];
      }());
break;
case 13:
this.$ = new yy.Select($$[$0-2], $$[$0], false);
break;
case 14:
this.$ = new yy.Select($$[$0-2], $$[$0], true);
break;
case 15:
this.$ = new yy.Select($$[$0-3], $$[$0-1], false, $$[$0]);
break;
case 16:
this.$ = new yy.Select($$[$0-3], $$[$0-1], true, $$[$0]);
break;
case 17:
this.$ = new yy.Table($$[$0]);
break;
case 18:
this.$ = new yy.Table($$[$0-1], $$[$0]);
break;
case 19:
this.$ = new yy.Table($$[$0-2], $$[$0]);
break;
case 20: case 49: case 50: case 51: case 52: case 57:
this.$ = $$[$0-1];
break;
case 21: case 66:
this.$ = new yy.SubSelect($$[$0-1]);
break;
case 22:
this.$ = new yy.SubSelect($$[$0-2], $$[$0]);
break;
case 23:
this.$ = new yy.Table($$[$0-5], null, $$[$0-4], $$[$0-3], $$[$0-1]);
break;
case 24: case 28: case 43: case 70: case 93: case 95:
this.$ = [$$[$0]];
break;
case 25:
this.$ = $$[$0-1].concat($$[$01]);
break;
case 26:
this.$ = new yy.Union($$[$0]);
break;
case 27:
this.$ = new yy.Union($$[$0], true);
break;
case 29:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 30:
this.$ = new yy.Join($$[$0-2], $$[$0]);
break;
case 31:
this.$ = new yy.Join($$[$0-2], $$[$0], 'LEFT');
break;
case 32:
this.$ = new yy.Join($$[$0-2], $$[$0], 'RIGHT');
break;
case 33:
this.$ = new yy.Join($$[$0-2], $$[$0], 'LEFT', 'INNER');
break;
case 34:
this.$ = new yy.Join($$[$0-2], $$[$0], 'RIGHT', 'INNER');
break;
case 35:
this.$ = new yy.Join($$[$0-2], $$[$0], 'LEFT', 'OUTER');
break;
case 36:
this.$ = new yy.Join($$[$0-2], $$[$0], 'RIGHT', 'OUTER');
break;
case 37:
this.$ = new yy.Where($$[$0]);
break;
case 38:
this.$ = new yy.Limit($$[$0]);
break;
case 39:
this.$ = new yy.Limit($$[$0], $$[$0-2]);
break;
case 40:
this.$ = new yy.Limit($$[$0-2], $$[$0]);
break;
case 41:
this.$ = new yy.Order($$[$0]);
break;
case 42:
this.$ = new yy.Order($$[$0-1], $$[$0]);
break;
case 44: case 94: case 96:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 45:
this.$ = new yy.OrderArgument($$[$0], 'ASC');
break;
case 46:
this.$ = new yy.OrderArgument($$[$0-1], $$[$0]);
break;
case 47:
this.$ = new yy.Offset($$[$0]);
break;
case 48:
this.$ = new yy.Offset($$[$0-1], $$[$0]);
break;
case 54:
this.$ = (function () {
        $$[$0-1].having = $$[$0];
        return $$[$0-1];
      }());
break;
case 55:
this.$ = new yy.Group($$[$0]);
break;
case 56:
this.$ = new yy.Having($$[$0]);
break;
case 58: case 59: case 60: case 61: case 63:
this.$ = new yy.Op($$[$0-1], $$[$0-2], $$[$0]);
break;
case 62:
this.$ = new yy.Op($$[$0-3], $$[$0-4], $$[$0-1]);
break;
case 64:
this.$ = new yy.UnaryOp($$[$0-1], $$[$0]);
break;
case 67:
this.$ = new yy.Case($$[$0-1]);
break;
case 68:
this.$ = new yy.Case($$[$0-2], $$[$0-1]);
break;
case 69:
this.$ = new yy.CaseWhen($$[$0-2], $$[$0]);
break;
case 71:
this.$ = new yy.CaseElse($$[$0]);
break;
case 79:
this.$ = new yy.ListValue($$[$0]);
break;
case 80:
this.$ = new yy.NumberValue($$[$0]);
break;
case 81:
this.$ = new yy.BooleanValue($$[$0]);
break;
case 82:
this.$ = new yy.ParameterValue($$[$0]);
break;
case 83:
this.$ = new yy.StringValue($$[$0], "'");
break;
case 84:
this.$ = new yy.StringValue($$[$0], '"');
break;
case 85:
this.$ = new yy.LiteralValue($$[$0]);
break;
case 86:
this.$ = new yy.LiteralValue($$[$0-2], $$[$0]);
break;
case 87: case 88:
this.$ = new yy.FunctionValue($$[$0-3], $$[$0-1]);
break;
case 89: case 90:
this.$ = new yy.FunctionValue($$[$0-3], $$[$0-1], true);
break;
case 91:
this.$ = new yy.ArgumentListValue($$[$0]);
break;
case 92:
this.$ = new yy.ArgumentListValue($$[$0], true);
break;
case 97:
this.$ = new yy.Star();
break;
case 98: case 100:
this.$ = new yy.Field($$[$0]);
break;
case 99: case 101:
this.$ = new yy.Field($$[$0-2], $$[$0]);
break;
}
},
table: [{3:1,4:2,6:3,8:4,9:5,10:6,14:7,16:$V0},{1:[3]},{5:[1,9]},o($V1,[2,2],{7:10,13:11,30:12,31:$V2,42:$V3}),o($V4,[2,4]),o($V4,[2,5]),o($V4,[2,6],{11:15,12:16,60:18,45:$V5,62:[1,19]}),o($V6,[2,11],{15:20,41:[1,21]}),{17:22,20:[1,23],22:32,24:$V7,29:33,36:26,50:29,71:$V8,72:27,73:$V9,81:34,82:35,83:36,84:37,85:38,86:$Va,87:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,93:$Vg,95:24,96:$Vh},{1:[2,1]},o($V1,[2,3],{30:46,31:$V2}),o($V4,[2,10]),o($Vi,[2,24]),{29:47,86:$Va},{6:48,8:4,9:5,10:6,14:7,16:$V0,32:[1,49]},o($V4,[2,7]),o($V4,[2,8],{11:50,45:$V5}),{46:[1,51]},o($Vj,[2,53],{61:52,64:[1,53]}),{46:[1,54]},o($V6,[2,12]),{22:32,24:$V7,29:33,36:55,50:29,71:$V8,81:34,82:35,83:36,84:37,85:38,86:$Va,87:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,93:$Vg},{18:[1,56],43:$Vk},{17:58,22:32,24:$V7,29:33,36:26,50:29,71:$V8,72:27,73:$V9,81:34,82:35,83:36,84:37,85:38,86:$Va,87:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,93:$Vg,95:24,96:$Vh},o($Vl,[2,95]),o($Vl,[2,97]),o($Vl,[2,98],{23:[1,59],65:$Vm,66:$Vn,67:$Vo,68:$Vp}),o($Vl,[2,100],{23:[1,64]}),{22:32,24:$V7,29:33,36:65,50:29,71:$V8,81:34,82:35,83:36,84:37,85:38,86:$Va,87:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,93:$Vg},o($Vq,[2,65],{69:[1,66]}),{24:[1,68],70:67},{74:69,77:[1,70]},o($Vr,[2,72],{92:$Vs}),o($Vr,[2,73]),o($Vr,[2,74]),o($Vr,[2,75]),o($Vr,[2,76]),o($Vr,[2,77]),o($Vr,[2,78]),o([5,18,23,26,31,34,37,38,41,42,43,44,45,51,62,64,65,66,67,68,69,75,78,80,92],$Vt,{24:[1,72]}),o([5,18,23,26,31,34,37,38,41,42,43,44,45,51,54,55,62,64,65,66,67,68,69,75,78,80],[2,80]),o($Vr,[2,83]),o($Vr,[2,84]),{24:[1,73]},o($Vr,[2,81]),o($Vr,[2,82]),o($Vi,[2,25]),o($V4,[2,38],{43:[1,74],44:[1,75]}),o($Vi,[2,26],{13:11,42:$V3}),{6:76,8:4,9:5,10:6,14:7,16:$V0},o($V4,[2,9]),{22:32,29:33,47:77,49:78,50:79,81:34,82:35,83:36,84:37,85:38,86:$Va,87:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,93:$Vg},o($Vj,[2,54]),{22:32,24:$V7,29:33,36:80,50:29,71:$V8,81:34,82:35,83:36,84:37,85:38,86:$Va,87:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,93:$Vg},{22:32,24:$V7,29:33,36:82,50:29,63:81,71:$V8,81:34,82:35,83:36,84:37,85:38,86:$Va,87:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,93:$Vg},o($V6,[2,37],{65:$Vm,66:$Vn,67:$Vo,68:$Vp}),{19:83,22:84,24:$Vu,91:$Vv},{22:32,24:$V7,29:33,36:26,50:29,71:$V8,72:27,73:$V9,81:34,82:35,83:36,84:37,85:38,86:$Va,87:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,93:$Vg,95:87,96:$Vh},{18:[1,88],43:$Vk},{22:89,91:$Vv},{22:32,24:$V7,29:33,36:90,50:29,71:$V8,81:34,82:35,83:36,84:37,85:38,86:$Va,87:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,93:$Vg},{22:32,24:$V7,29:33,36:91,50:29,71:$V8,81:34,82:35,83:36,84:37,85:38,86:$Va,87:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,93:$Vg},{22:32,24:$V7,29:33,36:92,50:29,71:$V8,81:34,82:35,83:36,84:37,85:38,86:$Va,87:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,93:$Vg},{22:32,24:$V7,29:33,36:93,50:29,71:$V8,81:34,82:35,83:36,84:37,85:38,86:$Va,87:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,93:$Vg},{22:94,91:$Vv},{26:[1,95],65:$Vm,66:$Vn,67:$Vo,68:$Vp},{24:[1,96],70:97},o($Vq,[2,64]),{4:98,6:3,8:4,9:5,10:6,14:7,16:$V0},{75:[1,99],76:100,80:[1,101]},{22:32,24:$V7,29:33,36:102,50:29,71:$V8,81:34,82:35,83:36,84:37,85:38,86:$Va,87:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,93:$Vg},{91:[1,103]},{20:$Vw,22:32,24:$V7,29:33,36:82,50:29,63:106,71:$V8,72:105,73:$V9,81:34,82:35,83:36,84:37,85:38,86:$Va,87:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,93:$Vg,94:104},{20:$Vw,22:32,24:$V7,29:33,36:82,50:29,63:106,71:$V8,72:109,73:$V9,81:34,82:35,83:36,84:37,85:38,86:$Va,87:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,93:$Vg,94:108},{29:110,86:$Va},{29:111,86:$Va},o($Vi,[2,27],{13:11,42:$V3}),o($V4,[2,41],{48:112,43:[1,113],44:[1,114]}),o($Vx,[2,43]),o($Vx,[2,45],{51:[1,115]}),o($Vj,[2,56],{65:$Vm,66:$Vn,67:$Vo,68:$Vp}),o([5,26,31,42,45,64],[2,55],{43:$Vy}),o($Vz,[2,93],{65:$Vm,66:$Vn,67:$Vo,68:$Vp}),o($VA,[2,13],{21:117,33:118,34:$VB,37:$VC,38:$VD}),o($VE,[2,17],{22:122,23:[1,123],27:[1,124],91:$Vv,92:$Vs}),{4:126,6:3,8:4,9:5,10:6,14:7,16:$V0,22:32,24:$V7,25:125,29:33,36:82,50:29,63:127,71:$V8,81:34,82:35,83:36,84:37,85:38,86:$Va,87:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,93:$Vg},o([5,18,23,26,27,31,34,35,37,38,41,42,43,45,62,91,92],$Vt),o($Vl,[2,96]),{19:128,22:84,24:$Vu,91:$Vv},o($Vl,[2,99],{92:$Vs}),o([5,18,23,26,31,34,37,38,41,42,43,45,62,64,65,67,68,75,78,80],[2,58],{66:$Vn}),o($Vq,[2,59]),o([5,18,23,26,31,34,37,38,41,42,43,45,62,64,67,68,75,78,80],[2,60],{65:$Vm,66:$Vn}),o([5,18,23,26,31,34,37,38,41,42,43,45,62,64,68,75,78,80],[2,61],{65:$Vm,66:$Vn,67:$Vo}),o($Vl,[2,101],{92:$Vs}),o($Vq,[2,57]),{4:98,6:3,8:4,9:5,10:6,14:7,16:$V0,22:32,24:$V7,25:129,29:33,36:82,50:29,63:127,71:$V8,81:34,82:35,83:36,84:37,85:38,86:$Va,87:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,93:$Vg},o($Vq,[2,63]),{26:[1,130]},o($VF,[2,67]),{75:[1,131]},{22:32,24:$V7,29:33,36:132,50:29,71:$V8,81:34,82:35,83:36,84:37,85:38,86:$Va,87:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,93:$Vg},{65:$Vm,66:$Vn,67:$Vo,68:$Vp,78:[1,133]},o([5,18,23,26,27,31,34,35,37,38,41,42,43,44,45,51,62,64,65,66,67,68,69,75,78,80,91,92],[2,86]),{26:[1,134]},{26:[1,135]},{26:[2,91],43:$Vy},{22:32,24:$V7,29:33,36:82,50:29,63:136,71:$V8,81:34,82:35,83:36,84:37,85:38,86:$Va,87:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,93:$Vg},{26:[1,137]},{26:[1,138]},o($V4,[2,39]),o($V4,[2,40]),o($V4,[2,42]),{22:32,29:33,49:139,50:79,81:34,82:35,83:36,84:37,85:38,86:$Va,87:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,93:$Vg},{29:141,52:140,86:$Va},o($Vx,[2,46]),{22:32,29:33,50:142,81:34,82:35,83:36,84:37,85:38,86:$Va,87:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,93:$Vg},o($VA,[2,15],{33:143,34:$VB,37:$VC,38:$VD}),o($VG,[2,28]),{19:144,22:84,24:$Vu,91:$Vv},{34:[1,145],39:[1,146],40:[1,147]},{34:[1,148],39:[1,149],40:[1,150]},o($VE,[2,18],{92:$Vs}),{22:151,91:$Vv},{28:[1,152]},{26:[1,153]},{26:[1,154]},{26:[2,79],43:$Vy},o($VA,[2,14],{33:118,21:155,34:$VB,37:$VC,38:$VD}),{26:[1,156]},o($Vq,[2,66]),o($VF,[2,68]),{65:$Vm,66:$Vn,67:$Vo,68:$Vp,75:[2,71]},{22:32,24:$V7,29:33,36:157,50:29,71:$V8,81:34,82:35,83:36,84:37,85:38,86:$Va,87:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,93:$Vg},o($Vr,[2,89]),o($Vr,[2,90]),{26:[2,92],43:$Vy},o($Vr,[2,87]),o($Vr,[2,88]),o($Vx,[2,44]),o($V4,[2,47],{53:158,56:[1,159]}),{54:[1,160],55:[1,161]},o($Vz,[2,94]),o($VG,[2,29]),{35:[1,162]},{19:163,22:84,24:$Vu,91:$Vv},{34:[1,164]},{34:[1,165]},{19:166,22:84,24:$Vu,91:$Vv},{34:[1,167]},{34:[1,168]},o($VE,[2,19],{92:$Vs}),{24:[1,169]},o($VE,[2,20]),o($VE,[2,21],{22:170,91:$Vv}),o($VA,[2,16],{33:143,34:$VB,37:$VC,38:$VD}),o($Vq,[2,62]),o([75,80],[2,69],{65:$Vm,66:$Vn,67:$Vo,68:$Vp}),o($V4,[2,48]),{57:[1,171],59:[1,172]},o($VH,[2,49]),o($VH,[2,50]),{22:32,24:$V7,29:33,36:173,50:29,71:$V8,81:34,82:35,83:36,84:37,85:38,86:$Va,87:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,93:$Vg},{35:[1,174]},{19:175,22:84,24:$Vu,91:$Vv},{19:176,22:84,24:$Vu,91:$Vv},{35:[1,177]},{19:178,22:84,24:$Vu,91:$Vv},{19:179,22:84,24:$Vu,91:$Vv},{29:180,86:$Va},o($VE,[2,22],{92:$Vs}),{29:141,52:181,86:$Va},{29:141,52:182,86:$Va},o($VG,[2,30],{65:$Vm,66:$Vn,67:$Vo,68:$Vp}),{22:32,24:$V7,29:33,36:183,50:29,71:$V8,81:34,82:35,83:36,84:37,85:38,86:$Va,87:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,93:$Vg},{35:[1,184]},{35:[1,185]},{22:32,24:$V7,29:33,36:186,50:29,71:$V8,81:34,82:35,83:36,84:37,85:38,86:$Va,87:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,93:$Vg},{35:[1,187]},{35:[1,188]},{26:[1,189]},{58:[1,190]},{58:[1,191]},o($VG,[2,31],{65:$Vm,66:$Vn,67:$Vo,68:$Vp}),{22:32,24:$V7,29:33,36:192,50:29,71:$V8,81:34,82:35,83:36,84:37,85:38,86:$Va,87:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,93:$Vg},{22:32,24:$V7,29:33,36:193,50:29,71:$V8,81:34,82:35,83:36,84:37,85:38,86:$Va,87:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,93:$Vg},o($VG,[2,32],{65:$Vm,66:$Vn,67:$Vo,68:$Vp}),{22:32,24:$V7,29:33,36:194,50:29,71:$V8,81:34,82:35,83:36,84:37,85:38,86:$Va,87:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,93:$Vg},{22:32,24:$V7,29:33,36:195,50:29,71:$V8,81:34,82:35,83:36,84:37,85:38,86:$Va,87:$Vb,88:$Vc,89:$Vd,90:$Ve,91:$Vf,93:$Vg},o($VE,[2,23]),o($V4,[2,51]),o($V4,[2,52]),o($VG,[2,33],{65:$Vm,66:$Vn,67:$Vo,68:$Vp}),o($VG,[2,35],{65:$Vm,66:$Vn,67:$Vo,68:$Vp}),o($VG,[2,34],{65:$Vm,66:$Vn,67:$Vo,68:$Vp}),o($VG,[2,36],{65:$Vm,66:$Vn,67:$Vo,68:$Vp})],
defaultActions: {9:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}